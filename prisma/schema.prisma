// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                 String    @id @default(cuid())
//   userId             String
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?
//   accessToken        String?
//   accessTokenExpires DateTime?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   user               User      @relation(fields: [userId], references: [id])

//   @@unique([providerId, providerAccountId])
// }

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  password      String
  email         String        @unique
  emailVerified DateTime?
  sessions      Session[]
  shortlinks    ShortLink[]
  balance       Decimal       @default(0)
  transactions  Transaction[]
  withdrawals   Withdrawal[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum UrlType {
  REDIRECT
  UPLOAD
}

model ShortLink {
  id           String        @id @default(cuid())
  type         UrlType
  redirectURL  RedirectLink? @relation(fields: [urlId], references: [id])
  urlId        String?
  uploadLink   UploadLink?   @relation(fields: [uploadLinkId], references: [id])
  uploadLinkId String?
  shortSlug    String        @unique @default(uuid())
  ads          Boolean       @default(true)
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  clicks       Click[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model RedirectLink {
  id         String      @id @default(cuid())
  url        String
  shortLinks ShortLink[]
}

model Click {
  id          String    @id @default(cuid())
  shortLink   ShortLink @relation(fields: [shortSlug], references: [shortSlug])
  shortSlug   String
  ip          String
  country     Country   @relation(fields: [countryCode], references: [code])
  countryCode String
  amount      Decimal   @default(0)
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum TransactionType {
  WITHDRAW
  REDIRECT
  UPLOAD
}

model Transaction {
  id        Int             @id @default(autoincrement())
  amount    Decimal
  type      TransactionType
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime        @default(now())
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  CANCELED
  REJECTED
  COMPLETED
}

enum WithdrawalMethods {
  PAYEER
  PAYPAL
  USDT
  PERFECTMONEY
}

model Withdrawal {
  id        Int               @id @default(autoincrement())
  amount    Decimal
  status    WithdrawalStatus
  to        String
  method    WithdrawalMethods
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model UploadLink {
  id        String      @id @default(cuid())
  files     File[]
  ShortLink ShortLink[]
}

model File {
  id           String     @id @default(cuid())
  mimetype     String
  url          String     @unique
  size         Int
  uploadLink   UploadLink @relation(fields: [uploadLinkId], references: [id])
  uploadLinkId String
}

model Country {
  id     String  @id @default(cuid())
  name   String
  code   String  @unique
  rate   Decimal
  clicks Click[]
}
